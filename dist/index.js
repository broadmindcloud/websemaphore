"use strict";var A=Object.defineProperty;var x=(s,o,e)=>o in s?A(s,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[o]=e;var p=(s,o,e)=>x(s,typeof o!="symbol"?o+"":o,e);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const q=(s,o,e)=>`${s}://${e||""}api-${o}.websemaphore.com/v1`,F="eu",k=["dev","prod","eu-dev","eu-prod","us-dev","us-prod"],C=s=>["dev","prod"].includes(s)?F+"-"+s:s,O=s=>k.includes(s)&&q("https",C(s)),P=s=>k.includes(s)&&q("wss",C(s),"ws");var T=(s=>(s.Json="application/json",s.FormData="multipart/form-data",s.UrlEncoded="application/x-www-form-urlencoded",s.Text="text/plain",s))(T||{});class E{constructor(o={}){p(this,"baseUrl","https://api-us-dev.websemaphore.com/v1");p(this,"securityData",null);p(this,"securityWorker");p(this,"abortControllers",new Map);p(this,"customFetch",(...o)=>fetch(...o));p(this,"baseApiParams",{credentials:"same-origin",headers:{},redirect:"follow",referrerPolicy:"no-referrer"});p(this,"setSecurityData",o=>{this.securityData=o});p(this,"contentFormatters",{"application/json":o=>o!==null&&(typeof o=="object"||typeof o=="string")?JSON.stringify(o):o,"text/plain":o=>o!==null&&typeof o!="string"?JSON.stringify(o):o,"multipart/form-data":o=>Object.keys(o||{}).reduce((e,t)=>{const r=o[t];return e.append(t,r instanceof Blob?r:typeof r=="object"&&r!==null?JSON.stringify(r):`${r}`),e},new FormData),"application/x-www-form-urlencoded":o=>this.toQueryString(o)});p(this,"createAbortSignal",o=>{if(this.abortControllers.has(o)){const t=this.abortControllers.get(o);return t?t.signal:void 0}const e=new AbortController;return this.abortControllers.set(o,e),e.signal});p(this,"abortRequest",o=>{const e=this.abortControllers.get(o);e&&(e.abort(),this.abortControllers.delete(o))});p(this,"request",async({body:o,secure:e,path:t,type:r,query:c,format:d,baseUrl:u,cancelToken:i,...a})=>{const l=(typeof e=="boolean"?e:this.baseApiParams.secure)&&this.securityWorker&&await this.securityWorker(this.securityData)||{},h=this.mergeRequestParams(a,l),g=c&&this.toQueryString(c),f=this.contentFormatters[r||"application/json"],m=d||h.format;return this.customFetch(`${u||this.baseUrl||""}${t}${g?`?${g}`:""}`,{...h,headers:{...h.headers||{},...r&&r!=="multipart/form-data"?{"Content-Type":r}:{}},signal:(i?this.createAbortSignal(i):h.signal)||null,body:typeof o>"u"||o===null?null:f(o)}).then(async b=>{const n=b.clone();n.data=null,n.error=null;const S=m?await b[m]().then(v=>(n.ok?n.data=v:n.error=v,n)).catch(v=>(n.error=v,n)):n;if(i&&this.abortControllers.delete(i),!b.ok)throw S;return S})});Object.assign(this,o)}encodeQueryParam(o,e){return`${encodeURIComponent(o)}=${encodeURIComponent(typeof e=="number"?e:`${e}`)}`}addQueryParam(o,e){return this.encodeQueryParam(e,o[e])}addArrayQueryParam(o,e){return o[e].map(r=>this.encodeQueryParam(e,r)).join("&")}toQueryString(o){const e=o||{};return Object.keys(e).filter(r=>typeof e[r]<"u").map(r=>Array.isArray(e[r])?this.addArrayQueryParam(e,r):this.addQueryParam(e,r)).join("&")}addQueryParams(o){const e=this.toQueryString(o);return e?`?${e}`:""}mergeRequestParams(o,e){return{...this.baseApiParams,...o,...e||{},headers:{...this.baseApiParams.headers||{},...o.headers||{},...e&&e.headers||{}}}}}class I extends E{constructor(){super(...arguments);p(this,"advisor",{generateMapping:(e,t={})=>this.request({path:"/advisor/generateMapping",method:"POST",body:e,secure:!0,type:"application/json",format:"json",...t}),optionsAdvisor:(e={})=>this.request({path:"/advisor/generateMapping",method:"OPTIONS",type:"application/json",...e})});p(this,"apikey",{list:(e,t={})=>this.request({path:"/apikey/readKeys",method:"GET",query:e,secure:!0,type:"application/json",format:"json",...t}),optionsApikey:(e={})=>this.request({path:"/apikey/readKeys",method:"OPTIONS",type:"application/json",...e}),upsert:(e,t={})=>this.request({path:"/apikey/upsertKey",method:"POST",body:e,secure:!0,type:"application/json",format:"json",...t}),optionsApikey2:(e={})=>this.request({path:"/apikey/upsertKey",method:"OPTIONS",type:"application/json",...e})});p(this,"auth",{getJwt:(e,t={})=>this.request({path:"/auth/idGetToken",method:"POST",body:e,type:"application/json",format:"json",...t}),optionsAuth:(e={})=>this.request({path:"/auth/idGetToken",method:"OPTIONS",type:"application/json",...e})});p(this,"emails",{upsert:(e,t={})=>this.request({path:"/emails/upsertEmail",method:"POST",body:e,type:"application/json",format:"json",...t}),optionsEmails:(e={})=>this.request({path:"/emails/upsertEmail",method:"OPTIONS",type:"application/json",...e})});p(this,"info",{infoList:(e={})=>this.request({path:"/info",method:"GET",type:"application/json",...e}),optionsInfo:(e={})=>this.request({path:"/info",method:"OPTIONS",type:"application/json",...e})});p(this,"payment",{createStripeCheckout:(e,t={})=>this.request({path:"/payment/stripe/checkoutSession",method:"POST",body:e,secure:!0,type:"application/json",format:"json",...t}),optionsPayment:(e={})=>this.request({path:"/payment/stripe/checkoutSession",method:"OPTIONS",type:"application/json",...e}),stripeWebhookCreatePaymentStripeWebhook:(e={})=>this.request({path:"/payment/stripe/webhook",method:"POST",type:"application/json",...e}),optionsPayment2:(e={})=>this.request({path:"/payment/stripe/webhook",method:"OPTIONS",type:"application/json",...e})});p(this,"semaphore",{read:(e,t={})=>this.request({path:"/semaphore",method:"GET",query:e,secure:!0,type:"application/json",format:"json",...t}),upsert:(e,t={})=>this.request({path:"/semaphore",method:"POST",body:e,secure:!0,type:"application/json",format:"json",...t}),optionsSemaphore:(e={})=>this.request({path:"/semaphore",method:"OPTIONS",type:"application/json",...e}),list:(e,t={})=>this.request({path:"/semaphore/list",method:"GET",query:e,secure:!0,type:"application/json",format:"json",...t}),optionsSemaphore2:(e={})=>this.request({path:"/semaphore/list",method:"OPTIONS",type:"application/json",...e}),acquire:(e,t,r={})=>this.request({path:`/semaphore/${e}/acquire`,method:"POST",body:t,secure:!0,type:"application/json",...r}),optionsSemaphore3:(e,t={})=>this.request({path:`/semaphore/${e}/acquire`,method:"OPTIONS",type:"application/json",...t}),acquireSync:(e,t,r={})=>this.request({path:`/semaphore/${e}/acquireSync`,method:"POST",body:t,secure:!0,type:"application/json",format:"json",...r}),optionsSemaphore4:(e,t={})=>this.request({path:`/semaphore/${e}/acquireSync`,method:"OPTIONS",type:"application/json",...t}),activate:(e,t,r={})=>this.request({path:`/semaphore/${e}/activate`,method:"POST",body:t,secure:!0,type:"application/json",format:"json",...r}),optionsSemaphore5:(e,t={})=>this.request({path:`/semaphore/${e}/activate`,method:"OPTIONS",type:"application/json",...t}),cancel:(e,t,r={})=>this.request({path:`/semaphore/${e}/cancel`,method:"POST",body:t,secure:!0,type:"application/json",...r}),optionsSemaphore6:(e,t={})=>this.request({path:`/semaphore/${e}/cancel`,method:"OPTIONS",type:"application/json",...t}),delete:(e,t,r={})=>this.request({path:`/semaphore/${e}/delete`,method:"POST",body:t,secure:!0,type:"application/json",...r}),optionsSemaphore7:(e,t={})=>this.request({path:`/semaphore/${e}/delete`,method:"OPTIONS",type:"application/json",...t}),readJob:(e,t,r={})=>this.request({path:`/semaphore/${e}/job`,method:"GET",query:t,secure:!0,type:"application/json",format:"json",...r}),optionsSemaphore8:(e,t={})=>this.request({path:`/semaphore/${e}/job`,method:"OPTIONS",type:"application/json",...t}),purgeQueue:(e,t={})=>this.request({path:`/semaphore/${e}/purge`,method:"DELETE",secure:!0,type:"application/json",format:"json",...t}),optionsSemaphore9:(e,t={})=>this.request({path:`/semaphore/${e}/purge`,method:"OPTIONS",type:"application/json",...t}),readQueue:(e,t,r={})=>this.request({path:`/semaphore/${e}/readQueue`,method:"GET",query:t,secure:!0,type:"application/json",format:"json",...r}),optionsSemaphore10:(e,t={})=>this.request({path:`/semaphore/${e}/readQueue`,method:"OPTIONS",type:"application/json",...t}),release:(e,t={})=>this.request({path:`/semaphore/${e}/release`,method:"POST",secure:!0,type:"application/json",...t}),optionsSemaphore11:(e,t={})=>this.request({path:`/semaphore/${e}/release`,method:"OPTIONS",type:"application/json",...t}),requeue:(e,t,r={})=>this.request({path:`/semaphore/${e}/requeue`,method:"POST",body:t,secure:!0,type:"application/json",...r}),optionsSemaphore12:(e,t={})=>this.request({path:`/semaphore/${e}/requeue`,method:"OPTIONS",type:"application/json",...t}),reschedule:(e,t,r={})=>this.request({path:`/semaphore/${e}/reschedule`,method:"POST",body:t,secure:!0,type:"application/json",...r}),optionsSemaphore13:(e,t={})=>this.request({path:`/semaphore/${e}/reschedule`,method:"OPTIONS",type:"application/json",...t})});p(this,"user",{read:(e,t={})=>this.request({path:"/user",method:"GET",query:e,secure:!0,type:"application/json",format:"json",...t}),create:(e,t={})=>this.request({path:"/user",method:"POST",body:e,secure:!0,type:"application/json",format:"json",...t}),update:(e,t={})=>this.request({path:"/user",method:"PUT",body:e,secure:!0,type:"application/json",format:"json",...t}),optionsUser:(e={})=>this.request({path:"/user",method:"OPTIONS",type:"application/json",...e}),activityStream:(e,t={})=>this.request({path:"/user/activityStream",method:"GET",query:e,secure:!0,type:"application/json",format:"json",...t}),optionsUser2:(e={})=>this.request({path:"/user/activityStream",method:"OPTIONS",type:"application/json",...e}),current:(e,t={})=>this.request({path:"/user/current",method:"GET",query:e,secure:!0,type:"application/json",format:"json",...t}),optionsUser3:(e={})=>this.request({path:"/user/current",method:"OPTIONS",type:"application/json",...e}),updatePassword:(e,t={})=>this.request({path:"/user/password",method:"PUT",body:e,secure:!0,type:"application/json",format:"json",...t}),optionsUser4:(e={})=>this.request({path:"/user/password",method:"OPTIONS",type:"application/json",...e})})}}class L extends I{}const Q=s=>{let o,e=(s==null?void 0:s.token)||"";const t=(...c)=>{s!=null&&s.logLevel&&console.log("WebSemaphoreHttpClientManager",...c)};return{initialize:c=>{let{baseUrl:d,fetch:u}=c||{};return d=d?O(d)||d:O("prod"),t(d),o=new L({baseUrl:d,securityWorker:i=>i?{headers:{Authorization:i.token}}:{},customFetch:u||((...i)=>fetch(...i))}),c!=null&&c.token&&o.setSecurityData({token:c.token}),o},getCurrentToken(){return e},updateToken(c){e=c,o.setSecurityData({token:c})},async authorize(){try{const c=await o.user.current();return t(`Logged in with ${c.data.id}`),c.data}catch(c){throw c}}}};function U(s){return s&&s.__esModule&&Object.prototype.hasOwnProperty.call(s,"default")?s.default:s}var W={exports:{}};(function(s){var o=Object.prototype.hasOwnProperty,e="~";function t(){}Object.create&&(t.prototype=Object.create(null),new t().__proto__||(e=!1));function r(i,a,l){this.fn=i,this.context=a,this.once=l||!1}function c(i,a,l,h,g){if(typeof l!="function")throw new TypeError("The listener must be a function");var f=new r(l,h||i,g),m=e?e+a:a;return i._events[m]?i._events[m].fn?i._events[m]=[i._events[m],f]:i._events[m].push(f):(i._events[m]=f,i._eventsCount++),i}function d(i,a){--i._eventsCount===0?i._events=new t:delete i._events[a]}function u(){this._events=new t,this._eventsCount=0}u.prototype.eventNames=function(){var a=[],l,h;if(this._eventsCount===0)return a;for(h in l=this._events)o.call(l,h)&&a.push(e?h.slice(1):h);return Object.getOwnPropertySymbols?a.concat(Object.getOwnPropertySymbols(l)):a},u.prototype.listeners=function(a){var l=e?e+a:a,h=this._events[l];if(!h)return[];if(h.fn)return[h.fn];for(var g=0,f=h.length,m=new Array(f);g<f;g++)m[g]=h[g].fn;return m},u.prototype.listenerCount=function(a){var l=e?e+a:a,h=this._events[l];return h?h.fn?1:h.length:0},u.prototype.emit=function(a,l,h,g,f,m){var b=e?e+a:a;if(!this._events[b])return!1;var n=this._events[b],S=arguments.length,v,y;if(n.fn){switch(n.once&&this.removeListener(a,n.fn,void 0,!0),S){case 1:return n.fn.call(n.context),!0;case 2:return n.fn.call(n.context,l),!0;case 3:return n.fn.call(n.context,l,h),!0;case 4:return n.fn.call(n.context,l,h,g),!0;case 5:return n.fn.call(n.context,l,h,g,f),!0;case 6:return n.fn.call(n.context,l,h,g,f,m),!0}for(y=1,v=new Array(S-1);y<S;y++)v[y-1]=arguments[y];n.fn.apply(n.context,v)}else{var _=n.length,j;for(y=0;y<_;y++)switch(n[y].once&&this.removeListener(a,n[y].fn,void 0,!0),S){case 1:n[y].fn.call(n[y].context);break;case 2:n[y].fn.call(n[y].context,l);break;case 3:n[y].fn.call(n[y].context,l,h);break;case 4:n[y].fn.call(n[y].context,l,h,g);break;default:if(!v)for(j=1,v=new Array(S-1);j<S;j++)v[j-1]=arguments[j];n[y].fn.apply(n[y].context,v)}}return!0},u.prototype.on=function(a,l,h){return c(this,a,l,h,!1)},u.prototype.once=function(a,l,h){return c(this,a,l,h,!0)},u.prototype.removeListener=function(a,l,h,g){var f=e?e+a:a;if(!this._events[f])return this;if(!l)return d(this,f),this;var m=this._events[f];if(m.fn)m.fn===l&&(!g||m.once)&&(!h||m.context===h)&&d(this,f);else{for(var b=0,n=[],S=m.length;b<S;b++)(m[b].fn!==l||g&&!m[b].once||h&&m[b].context!==h)&&n.push(m[b]);n.length?this._events[f]=n.length===1?n[0]:n:d(this,f)}return this},u.prototype.removeAllListeners=function(a){var l;return a?(l=e?e+a:a,this._events[l]&&d(this,l)):(this._events=new t,this._eventsCount=0),this},u.prototype.off=u.prototype.removeListener,u.prototype.addListener=u.prototype.on,u.prefixed=e,u.EventEmitter=u,s.exports=u})(W);var D=W.exports;const $=U(D),w=()=>{const s={};let o=new Promise((e,t)=>{s.resolve=e,s.reject=t});return o.resolve=s.resolve,o.reject=s.reject,o};class G extends ${constructor(e,t){super();p(this,"socket");p(this,"pingInterval");p(this,"pingCounter",0);p(this,"outboundQueue",[]);p(this,"token","");p(this,"url","");p(this,"noReconnect",!1);p(this,"upd");p(this,"WSImplementation");p(this,"logLevel","");p(this,"boundListeners",[]);const r=t!=null&&t.websockets?t.websockets:globalThis.WebSocket;if(this.WSImplementation=r,this.url=t!=null&&t.url?P(t==null?void 0:t.url)||t.url:P("prod"),this.socket=null,this.upd=e,this.toggle=this.toggle.bind(this),this.send=this.send.bind(this),this.logLevel=this.logLevel,!r)throw new Error("No websockets implementation provided or available natively")}log(...e){this.logLevel&&console.log("WebSemaphoreWebsocketsTransportClient",...e)}isConnected(){var e;return this.log("Ready state: ",(e=this.socket)==null?void 0:e.readyState),this.socket&&this.socket.readyState===this.socket.OPEN}initPing(e){this.pingInterval=setInterval(()=>{var t;(t=this.socket)==null||t.send("ping"),this.pingCounter++,this.log("ping, pingCounter == ",this.pingCounter)},1e4)}stopPing(){clearInterval(this.pingInterval)}processPong(e){e.data==="pong"&&(this.pingCounter--,this.log("pong, pingCounter == ",this.pingCounter,new Date().toISOString()))}logError(e){this.log(e)}addEventListeners(){if(!this.socket)throw new Error("Socket is not available");this.boundListeners=[{name:"open",handler:this.initPing},{name:"open",handler:this.flush},{name:"close",handler:this.onClose},{name:"error",handler:this.logError},{name:"message",handler:this.processPong},{name:"message",handler:this.forwardEvents}].map(e=>({name:e.name,handler:e.handler.bind(this)})),this.boundListeners.forEach(e=>{var t;return(t=this.socket)==null?void 0:t.addEventListener(e.name,e.handler)})}removeEventListeners(){if(!this.socket)throw new Error("Socket is not available");this.boundListeners.forEach(e=>{var t;return(t=this.socket)==null?void 0:t.removeEventListener(e.name,e.handler)}),this.noReconnect=!0}forwardEvents(e){e.data!=="pong"&&this.emit("message",e)}onClose(){this.stopPing(),!this.noReconnect&&this.token?this.toggle(this.token):this.removeEventListeners(),this.noReconnect=!1}async toggle(e=""){var c,d;this.token=e;const t=this.upd(this.url,this.token),r=!e;if(this.log("Websemaphore Websockets connection is toggling",r?"off":"on"),!(this.url===t&&e==this.token&&((c=this.socket)==null?void 0:c.readyState)===((d=this.socket)==null?void 0:d.OPEN)))return this.url=t,r&&await this.flush(),this.socket?this.socket.close():(this.socket=new this.WSImplementation(this.url),this.addEventListeners()),Promise.resolve()}send(e){var t;if(this.log("Sending",e),!this.isConnected()){this.outboundQueue.unshift(e);return}typeof e!="string"&&(e=JSON.stringify(e)),(t=this.socket)==null||t.send(e)}async flush(){const e=w(),t=this.socket;let r=0;const c=this.outboundQueue||[];for(this.log("Flushing outbound queue has items:",c.length);c.length;)this.send(c.pop());const d=()=>{if(this.log("Flushing #",r++),!this.isConnected())return e.resolve();(t==null?void 0:t.bufferedAmount)?(this.log("Items in buffer #",r++),setTimeout(()=>{d()},500)):(this.log("ResolveWhenDone Done"),e.resolve())};return d(),e}}class N extends ${constructor(e){super();p(this,"wsClient");p(this,"cache");p(this,"logLevel","");if(this.wsClient=e.wsClient,this.logLevel=e.logLevel||this.logLevel,!this.wsClient)throw new Error("No websockets implementation available. If using in nodejs try `npm i ws` or equivalent");this.cache={inFlight:{},history:[]},this.wsClient.addListener("message",t=>{this.emit("message",t.data),this._processIncoming(t.data)})}acquire({semaphoreId:e,channelId:t,sync:r,body:c}){let d=0;const u=Date.now().toString()+"-"+d++;this.wsClient.send({action:r?"lock.acquireSync":"lock.acquire",payload:JSON.stringify({id:u,body:c||"{}"}),semaphoreId:e,channelId:t});const i=w();return this.cache.inFlight[u]={promise:i,status:"waiting",release:()=>{throw new Error("Cannot call release before the lock is acquired or rejected")}},i.then(a=>({status:a.status,payload:a.payload,jobCrn:a.jobCrn,release:()=>{this.release({jobCrn:a.jobCrn})}}))}log(...e){this.logLevel&&console.log("WebSemaphoreWebsocketsClient",...e)}_processIncoming(e){const t=JSON.parse(e),r=t.event;if(t.type==="lock"&&r=="acquired"){const c=this.cache.inFlight[t.payload.id];c.promise.resolve({...c,status:t.event,payload:t.payload,jobCrn:t.jobCrn})}}jobAction({jobCrn:e,action:t}){const r=["requeue","reschedule","acquire"].includes(t);let c=0;const d=Date.now().toString()+"-"+c++;this.wsClient.send({action:`lock.${t}`,jobCrn:e});const u=w();return this.cache.inFlight[d]={promise:u,status:"waiting",release:()=>{throw new Error("Cannot call release before the lock is acquired or rejected")}},r?u.then(i=>({status:i.status,payload:i.payload,jobCrn:i.jobCrn,release:()=>{this.release({jobCrn:i.jobCrn})}})):Promise.resolve({status:`${t}ed`,jobCrn:e,payload:"",release:()=>{}})}release({jobCrn:e}){this.jobAction({jobCrn:e,action:"release"}),delete this.cache.inFlight[e],this.cache.history.push(e)}requeue({jobCrn:e}){return this.jobAction({jobCrn:e,action:"requeue"})}reschedule({jobCrn:e}){return this.jobAction({jobCrn:e,action:"reschedule"})}cancel({jobCrn:e}){return this.jobAction({jobCrn:e,action:"cancel"})}archive({jobCrn:e}){return this.jobAction({jobCrn:e,action:"archive"})}delete({jobCrn:e}){return this.jobAction({jobCrn:e,action:"delete"})}client(){return this.wsClient}setClient(e){this.wsClient=e}getCache(){return this.cache}}const R=s=>{const o=s!=null&&s.websockets?s.websockets:globalThis.WebSocket,e=new G((d,u)=>`${d}?token=${encodeURIComponent(u)}`,{websockets:o,logLevel:s==null?void 0:s.logLevel,url:s==null?void 0:s.baseUrl});let t=new N({wsClient:e,logLevel:s==null?void 0:s.logLevel});return{connect:async d=>{if(!d||!d.replace(/^ApiKey./,""))throw new Error("Couln't connect (did you pass a token?)");const u=w();if(await e.toggle(d),!e.socket)throw new Error("Websocket was not created, the provided implementation might be incompatible.");return e.socket.addEventListener&&e.socket.addEventListener("error",i=>{s!=null&&s.logLevel&&console.log("Couldn't connect, aborted...",i),u.reject(i)}),e.socket.addEventListener("open",i=>{s!=null&&s.logLevel&&console.log("Connected..."),u.resolve(t)}),u},disconnect:()=>e.toggle(),wsClient:e,client:t}};exports.Api=I;exports.ContentType=T;exports.HttpClient=E;exports.WebSemaphoreHttpClientManager=Q;exports.WebSemaphoreWebsocketsClient=N;exports.WebSemaphoreWebsocketsClientManager=R;exports.WebsemaphoreHttpClient=L;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
